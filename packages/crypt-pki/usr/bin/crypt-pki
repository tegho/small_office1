#!/bin/bash


function errorinfo() {
  echo "$1" >&2
}


function helpexit() {
  local me=$(basename "$0")
  cat << HELP
Encrypted PKI manager.
$me --help
  Print help and exit.
  Exit code is 1.

OPERATIONS:
  $me is able to create encrypted container, mount and unmount it, mount-execute-unmount operations in one step.
  Actual PKI is based on easy-rsa inside the container. It goes interactively while no passwords are given in
  environment variables (check VARIABLES section). $me is just a wrap for easy-rsa, so it takes same environment
  variables and uses filenames without extension (internalname) to point to some certificate.
  First parameter always must be a cryptfile.
  Always tries to close the container at first if it was already opened. Returns 1 if failed.

$me cryptfile --init [--size size] [--url "http://example.com/crl"]
  Create a new container in the cryptfile. File can not exist.
  Then copy /usr/share/easy-rsa inside, tune vars and configs.
  Then runs "easyrsa init-pki" inside the container.
  Size in MiB for an ext4 filesystem in the container. Minimum 8 MiB (3.5 data + journal).
  Default size is 12 MiB (7.3 data + journal). Actual container is always 16 MiB bigger than size.
  Url is a http (not https) url to crl distribution point. Web server should answer with application/pkix-crl MIME.
  If succeed exit code is 0 and stdout is a line with base64 container key.
  Now it is a good time to modify configs if needed before any keys manipulations.

$me cryptfile --open
  Open container from cryptfile and mount it in temp directory with permission 700.
  If succeed exit code is 0 and stdout is a name of the mountpoint.
  Dont forget to close it!

$me cryptfile --close
  Tries to close container if it is already opened.
  If succeed exit code is 0.

$me cryptfile --exec --cmd "cmdline"
  Open container from cryptfile and mount it in temp directory with permission 700. Exits if failed.
  Then runs cmdline string with eval. You can use variable SECD in cmdline as the mountpoint. Current dir for
  the cmdline is the mountpoint.
  Then closes container.
  Exit code is 0 if all steps succeded and cmdline exit code is 0.

$me cryptfile --newreq [--cn CN] --internalname internalname [--nopass]
  Creating a new cert request:
  If CN is not specified then cn=internalname.
  Internalname is a filename of key/request/cert without extension.
  Requests with the same internalname which dont have key or cert will be overwritten.
  If nopass is missed asks for a key password or takes it from EASYRSA_PASSOUT variable.
  Exit code is 0 if filename is available and request is generated successfully.

$me cryptfile --loadreq --file filename [--internalname internalname]
  Load external cert request inside container.
  Checks if filename have same available internalname and protects existing keys from overwriting.
  Requests which dont have key or cert may be overwritten.
  Exit code is 0 if same internalname is available and request is loaded successfully.

$me cryptfile --signserver --internalname internalname --dns dns [--userid userid]
  Sign cert request inside container.
  Dns must be valid in order to IPSEC work.
  If userid is not specified then userid=internalname.
  Adds dns and rfc822Name(userid) in subject-alt-name. Correct DNS is important if you run ipsec server and
  rfc822Name is being used as a some text tag.
  EASYRSA_PASSIN variable is a password for ca key if being used in batch mode.
  Exit code is 0 if signed successfully.

$me cryptfile --signclient --internalname internalname [--dns dns] [--userid userid]
  Sign cert request inside container.
  If userid is not specified then userid=internalname.
  Adds dns and rfc822Name(userid) in subject-alt-name. DNS might not be important for client certs, but
  rfc822Name(userid) might be used as user unique identificator by server.
  EASYRSA_PASSIN variable is a password for ca key if being used in batch mode.
  Exit code is 0 if signed successfully.

$me cryptfile --info [ --internalname internalname | --serial serial ]
  Print info about certificate by internalname or serial.
  Serial is a case-insensitive hex serial without any octet separators (0466a8ce8A193802df863E47F357157a)
  1st line in stdout will be one of 3:
    1) ACTIVE
      Means certificate is found and it is active. Exit code 0.
    2) REVOKED
      Means certificate is found and it is revoked. Exit code 0.
    3) NOTFOUND
      Means certificate is not found. Exit code 0.
  Then it goes cert info starting from the 2nd line.

$me cryptfile --revoke [ --internalname internalname | --serial serial ] --file crlfile
  Revoke certificate by its internalname or serial and rebuilds CRL.
  Serial is a case-insensitive hex serial without any octet separators (0466a8ce8A193802df863E47F357157a)
  EASYRSA_PASSIN variable is a password for ca key if being used in batch mode.
  Crlfile is output file with a new CRL.
  Exit code is 0 if all steps succeded, but tries to rebuild crl despite of revocation result.

$me cryptfile --crl --file crlfile
  Rebuilds CRL.
  EASYRSA_PASSIN variable is a password for ca key if being used in batch mode.
  Crlfile is output file with a new CRL.
  Exit code is 0 if succeded.

$me cryptfile --loadtemplate --file template
  Load template of openvpn config to easily export and distribute configs and keys.
  Check for examples in /usr/share/$me/templates
  Exit code is 0 if succeded.

$me cryptfile --export-config --template tplname --internalname internalname --file configfile
  Export fulfilled template with certificate, ca, etc.
  Check for examples in /usr/share/$me/templates
  Exit code is 0 if succeded.

$me cryptfile --export-chain --internalname internalname --file chainfile
  Export certificate specified by internalname with key and ca in PKCS #12 format.
  Client key file must exist in PKI.
  EASYRSA_PASSOUT variable is a password for the chainfile container if being used in batch mode.
  Exit code is 0 if succeded.

$me cryptfile --export-response --internalname internalname --file chainfile
  Export certificate specified by internalname and ca in PKCS #7 format.
  Client key file must exist on client side. Used as response to client cert request.
  Exit code is 0 if succeded.

$me cryptfile --export-zip --internalname internalname --file archive
  Export specified cert, key, ca and ta in zip archive.
  Exit code is 0 if succeded.

VARIABLES:
  EASYRSA_PASSIN and EASYRSA_PASSOUT are used by easyrsa being started inside the PKI container.
    See the openssl-passphrase-options(1) manual page for format.
  CTKEY is a key for the container.
  SECD is a variable to be used inside --exec --cmd. Contains a path to mounted PKI container.


EXAMPLES:
  # Create a new container
  ctkey=\$($me ./cryptfile --init --url "http://example.com/crl") && [ -n "\$ctkey" ] && echo "\$ctkey" > ./ctkey

  # Generate a CA
  echo "Secret_CA_Password" > "./capwd" # For batch mode
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" EASYRSA_PASSOUT="\$EASYRSA_PASSIN" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --exec --cmd "easy-rsa/easyrsa --req-cn=\"exampleCA\" build-ca"
  # or just dont use variables for interactive mode
  $me ./cryptfile --exec --cmd "easy-rsa/easyrsa --req-cn=\"exampleCA\" build-ca"

  # Generate a new CRL
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --crl --file /var/www/crlfile.crl

  # Generate cert request for a server with unencrypted private key
  CTKEY="$(cat ./ctkey)" $me ./cryptfile --newreq --internalname vpn.example.com --nopass

  # Generate more cert requests. Any CN allowed
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --newreq --internalname smith --cn "His majesty Georg VI" --nopass
  EASYRSA_PASSOUT="pass:1234" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --newreq --internalname smith2 --cn "Alice Smith"

  # Load clients request
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --loadreq --file ./client.req --internalname smith3

  # Sign requests
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --signserver --internalname vpn.example.com
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --signclient --internalname smith --userid john_smith
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --signclient --internalname smith2 --userid alice_smith
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --signclient --internalname smith3 --userid sandra_smith

  # Get info about cert
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --info --internalname smith3

  # Revoke cert
  EASYRSA_PASSIN="pass:\$(cat ./capwd)" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --revoke --internalname smith2 --file /var/www/crlfile.crl

  # Config templates
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --loadtemplate --file /usr/share/$me/templates/win-api
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --export-config --template win-api --internalname smith --file ./config-win.ovpn

  # Export certificates
  EASYRSA_PASSOUT="pass:12345" CTKEY="\$(cat ./ctkey)" $me ./cryptfile --export-chain --internalname smith --file ./smith.p12
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --export-response --internalname smith3 --file ./smith3.p7b
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --export-zip --internalname vpn.example.com --file ./server.zip

  # Check the container for a free space
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile "df -h \\\$SECD"

  # Print easy-rsa\\vars piped and filtered
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile "cat easy-rsa/vars|sed -n '/^[\t ]*#/d;/^[\t ]*$/d;p'"

  # Open the container for a manual maintance
  CTKEY="\$(cat ./ctkey)" $me ./cryptfile --open

  # Close the container
  $me ./cryptfile --close

HELP
  exit 1
}


function open_container() {
  local pki_container="$1"
  local CTKEY_txt="$2"
  local crypto_dir
  local container_name

  if [ -z "$pki_container" ]; then
    errorinfo "($FUNCNAME) Set a filename of container"
    return 1
  fi

  pki_container=$(realpath -ms -- "$pki_container")
  if [ ! -f "$pki_container" ]; then
    errorinfo "($FUNCNAME) Container does not exists: $pki_container"
    return 1
  fi

  if ! container_name=$(openssl rand -hex 8); then
    rm -f "$pki_container"
    errorinfo "($FUNCNAME) Openssl rand error"
    return 1
  fi

  CTKEY_txt="$CTKEY"
  [ -z "$CTKEY_txt" ] && read -sp "Key (base64) for the container: " CTKEY_txt
  if [ -z "$CTKEY_txt" ]; then
    errorinfo "($FUNCNAME) Container key is empty"
    return 1
  fi

  if ! echo $CTKEY_txt | base64 -d | cryptsetup open --type luks --key-file - "$pki_container" "$container_name" ; then
    errorinfo "($FUNCNAME) Cannot open container: $pki_container"
    return 1
  fi

  crypto_dir=$(mktemp -d /tmp/cptXXXXXX) && \
    rm -rf "$crypto_dir" && \
    mkdir -p "$crypto_dir" && \
    chmod 700 "$crypto_dir"
  if [ $? -ne 0 ]; then
    cryptsetup close "$container_name"
    errorinfo "($FUNCNAME) Cannot create temp mountpoint: $crypto_dir"
    return 1
  fi

  if ! mount -o sync "/dev/mapper/$container_name" "$crypto_dir"; then
    rm -rf "$crypto_dir"
    cryptsetup close "$container_name"
    errorinfo "($FUNCNAME) Cannot mount container $pki_container to $crypto_dir"
    return 1
  fi

  if ! chmod 700 "$crypto_dir" ; then
    umount -l "$crypto_dir"
    rm -rf "$crypto_dir"
    cryptsetup close "$container_name"
    errorinfo "($FUNCNAME) Cannot set permissions after mount."
    return 1
  fi

  echo "$crypto_dir"
  return 0
}


function close_container() {
  local pki_container="$1"
  local loopname
  local container_name
  local crypto_dir
  local ret=0

  if [ -z "$pki_container" ]; then
    errorinfo "($FUNCNAME) Set a filename of container"
    return 1
  fi

  pki_container=$(realpath -ms -- "$pki_container")
  if [ ! -f "$pki_container" ]; then
    errorinfo "($FUNCNAME) Container does not exists: $pki_container"
    return 1
  fi

  # if same container opened multiple times
  losetup -j "$pki_container" | cut -d ':' -f1 | while read loopname; do
    loopname=$(basename "$loopname")

    # if multiple devices associated with this loop
    dmsetup deps -o devname | grep "($loopname)" | cut -d ':' -f1 | while read container_name; do
      sync "/dev/mapper/$container_name" || sleep 5

      # if mounted multiple times
      lsblk "/dev/mapper/$container_name" -no mountpoint | while read crypto_dir; do

        if [ -n "$crypto_dir" ]; then
          umount -l "$crypto_dir"
          rm -rf "$crypto_dir"
        fi
      done

      if ! cryptsetup close "$container_name"; then
        errorinfo "($FUNCNAME) Associated device cannot be closed: /dev/mapper/$container_name"
        ret=1
      fi
    done
  done

  return $ret
}


function exec_inside() {
  local crypto_dir="$1"
  local command=${@:2}
  local ret

#  echo "$command"
  command='export SECD="'$crypto_dir'"; cd "$SECD"; '$command'; ret=$?; cd "'$current_dir'"; return $ret'
  eval "$command"
#  echo "$command"

  return $?
}


function getparam() {
  local param="$1"; shift
  local cryptfile="$1"
  local ret
  local found

  [ -z "$param" ] && return 1
  ret=1
  case "$param" in
  "CRYPT")
    [ -n "$cryptfile" ] && ret=0 && echo "$cryptfile"
    ;;
  *)
    while shift && [ "$ret" -eq 1 ] ; do
      case "$1" in
      "--init" | \
      "--open" | \
      "--close" | \
      "--exec" | \
      "--newreq" | \
      "--loadreq" | \
      "--loadtemplate" | \
      "--signserver" | \
      "--signclient" | \
      "--info" | \
      "--revoke" | \
      "--crl" | \
      "--export-config" | \
      "--export-chain" | \
      "--export-response" | \
      "--export-zip" )
        [ "$param" == "CMD" ] && ret=0 && echo "$1"
        ;;
      "--size" | \
      "--cmd" | \
      "--cn" | \
      "--internalname" | \
      "--file" | \
      "--dns" | \
      "--userid" | \
      "--serial" | \
      "--template" | \
      "--url" )
        [ "$param" == "$1" ] && shift && [ -n "$1" ] && ret=0 && echo "$1" || shift
        ;;
      "--help" | \
      "--nopass")
        [ "$param" == "$1" ] && ret=0
        ;;
      *)
        [ -z "$1" ] && continue
        echo "$1 - unknown parameter. Exit" >&2
        exit
        ;;
      esac
    done
    ;;
  esac

  return $ret
}


current_dir=$(dirname $(realpath -ms -- "$0"))

if [ $# -lt 1 ] || getparam "--help" "$@" ; then
  helpexit
fi
if ! pki_container=$(getparam "CRYPT" "$@") ; then
  errorinfo "Cryptfile is not specified"
  exit 1
fi
if ! command=$(getparam "CMD" "$@") ; then
  errorinfo "Not sure what you want me to do"
  exit 1
fi


case "$command" in
  "--init")
    pki_container=$(realpath -ms -- "$pki_container")
    if [ -e "$pki_container" ]; then
      errorinfo "File can not exist: $pki_container"
      exit 1
    fi

    container_size_mib=$(getparam "--size" "$@") || container_size_mib=12
    t=$(echo "$container_size_mib" | sed 's/[^0-9]//g')
    if [ "$t" != "$container_size_mib" ] ; then
      errorinfo "Size must be integer: $container_size_mib"
      exit 1
    fi
    if [ "$container_size_mib" -lt 8 ] ; then
      errorinfo "Size must be at least 8 MiB to fit journal: $container_size_mib"
      exit 1
    fi
    # add crypto headers to the size
    container_size_mib=$(( $container_size_mib +16 ))

    if crl_line=$(getparam "--url" "$@") ; then
      crl_line="crlDistributionPoints = URI:$crl_line"
      crl_days="180"
    else
      crl_days="36500"
      crl_line=""
    fi

    if ! dd if=/dev/urandom of="$pki_container" bs=1MiB count="$container_size_mib" &> /dev/null ; then
      errorinfo "Cannot create file: $pki_container"
      exit 1
    fi

    # keylen 32 for aes
    if ! CTKEY_txt=$(openssl rand 32 | base64 -w0) ; then
      rm -f "$pki_container"
      errorinfo "Cannot create key"
      exit 1
    fi

    if ! container_name=$(openssl rand -hex 8) ; then
      rm -f "$pki_container"
      errorinfo "Openssl rand error"
      exit 1
    fi

    if ! echo $CTKEY_txt | base64 -d | cryptsetup -q --cipher aes-cbc-essiv:sha256 --key-file - luksFormat "$pki_container" ; then
      rm -f "$pki_container"
      errorinfo "Cannot format new container: $pki_container"
      exit 1
    fi

    if ! echo $CTKEY_txt | base64 -d | cryptsetup open --type luks --key-file - "$pki_container" "$container_name" ; then
      rm -f "$pki_container"
      errorinfo "Cannot open new container: $pki_container"
      exit 1
    fi

    if ! mkfs.ext4 -q -m0 "/dev/mapper/$container_name" ; then
      cryptsetup close "$container_name"
      rm -f "$pki_container"
      errorinfo "Cannot format FS in the container: $pki_container"
      exit 1
    fi
    sync "/dev/mapper/$container_name" || sleep 5

    crypto_dir=$(mktemp -d /tmp/cptXXXXXX) && \
      rm -rf "$crypto_dir" && \
      mkdir -p "$crypto_dir" && \
      chmod 700 "$crypto_dir"
    if [ $? -ne 0 ]; then
      cryptsetup close "$container_name"
      rm -f "$pki_container"
      errorinfo "Cannot create temp mountpoint: $crypto_dir"
      exit 1
    fi

    if ! mount -o sync "/dev/mapper/$container_name" "$crypto_dir" ; then
      rm -rf "$crypto_dir"
      cryptsetup close "$container_name"
      rm -f "$pki_container"
      errorinfo "Cannot mount container $pki_container to $crypto_dir"
      exit 1
    fi
    chmod 700 "$crypto_dir"

    ret=0
    [ $ret -eq 0 ] && cp -a /usr/share/easy-rsa "$crypto_dir" && \
      cp "$crypto_dir/easy-rsa/vars.example" "$crypto_dir/easy-rsa/vars" && \
      cat << VARS >> "$crypto_dir/easy-rsa/vars"
set_var EASYRSA_BATCH       Yes
set_var EASYRSA_ALGO        ec
set_var EASYRSA_DIGEST      "sha512"
set_var EASYRSA_CRL_DAYS    $crl_days
set_var EASYRSA_DN          "org"
set_var EASYRSA_REQ_COUNTRY ""
set_var EASYRSA_REQ_PROVINCE ""
set_var EASYRSA_REQ_CITY    ""
set_var EASYRSA_REQ_ORG     ""
set_var EASYRSA_REQ_EMAIL   ""
set_var EASYRSA_REQ_OU      ""
VARS
    [ $? -ne 0 ] && ret=1 && errorinfo "Cannot write into container: $pki_container"

    [ $ret -eq 0 ] && [ -n "$crl_line" ] && ! echo "$crl_line" >> "$crypto_dir/easy-rsa/x509-types/COMMON" && ret=1 && errorinfo "Cannot write crl to COMMON"
    [ $ret -eq 0 ] && ! sed 's/commonName[\t ]\+=[\t ]\+supplied/commonName\t= optional/' -i "$crypto_dir/easy-rsa/openssl-easyrsa.cnf" && ret=1 && errorinfo "Cannot make commonName optional"
    [ $ret -eq 0 ] && ! mkdir -p "$crypto_dir/templates" && ret=1 && errorinfo "Cannot create templates dir"

    [ $ret -eq 0 ] && ! "$crypto_dir/easy-rsa/easyrsa" --pki-dir="$crypto_dir/pki" init-pki >&2 && \
      ret=1 && errorinfo "Easyrsa cannot init in container: $pki_container"
    [ $ret -eq 0 ] && ! openvpn --genkey secret "$crypto_dir/pki/ta.key" && ret=1 && errorinfo "Cannot create TA secret"

    sync "/dev/mapper/$container_name" || sleep 5
    umount -l "/dev/mapper/$container_name"
    rm -rf "$crypto_dir"
    cryptsetup close "$container_name"

    if [ $ret -eq 0 ] ; then
      echo "$CTKEY_txt"
    else
      rm -f "$pki_container"
    fi
    exit $ret
    ;;

  "--open")
    close_container "$pki_container" || exit 1
    crypto_dir=$(open_container "$pki_container" "$CTKEY") || exit 1
    echo "$crypto_dir"
    exit 0
    ;;

  "--close")
    close_container "$pki_container" || exit 1
    exit 0
    ;;

  "--loadreq")
    if ! load_file=$(getparam "--file" "$@") ; then
      errorinfo "No file to load"
      exit 1
    fi

    load_file=$(realpath -ms -- "$load_file")
    if [ ! -f "$load_file" ]; then
      errorinfo "File does not exists: $load_file"
      exit 1
    fi

    if ! internalname=$(getparam "--internalname" "$@") ; then
      internalname="$(basename \"$load_file\" | sed 's/\.[^\.]*$//')"
      if [ -z "$internalname" ] || [ "$internalname" == "ca" ]; then
        errorinfo "Inappropriate internalname"
        exit 1
      fi
    fi

    close_container "$pki_container" || exit 1
    crypto_dir=$(open_container "$pki_container" "$CTKEY") || exit 1

    ret=0
    if [ -f "$crypto_dir/pki/private/${internalname}.key" ] || [ -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      ret=1
      errorinfo "Internalname is occupied: $internalname"
    fi

    [ $ret -eq 0 ] && ! cp -f "$load_file" "$crypto_dir/pki/reqs/${internalname}.req" && ret=1
    close_container "$pki_container" || ret=1

    exit $ret
    ;;

  "--newreq")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    cn_name=$(getparam "--cn" "$@") || cn_name="$internalname"

    nopass=""
    getparam "--nopass" "$@" && nopass="nopass"

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    if [ -f "$crypto_dir/pki/private/${internalname}.key" ] || [ -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      ret=1
      errorinfo "internalname is occupied: $internalname"
    fi
    if [ $ret -eq 0 ]; then
      rm -f "$crypto_dir/pki/reqs/${internalname}.req"
      exec_inside "$crypto_dir" "easy-rsa/easyrsa --req-cn=\"$cn_name\" gen-req \"$internalname\" $nopass" || ret=1
    fi
    close_container "$pki_container" || ret=1

    exit $ret
    ;;

  "--signserver")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    userid=$(getparam "--userid" "$@") || userid="$internalname"
    dnsname=$(getparam "--dns" "$@") || dnsname="$internalname"

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    if [ ! -f "$crypto_dir/pki/reqs/${internalname}.req" ] ; then
      ret=1
      errorinfo "No such a request: ${internalname}.req"
    fi
    if [ $ret -eq 0 ] && [ -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      ret=1
      errorinfo "Cert with this internalname have already been issued: ${internalname}"
    fi

    if [ $ret -eq 0 ]; then
      exec_inside "$crypto_dir" "easy-rsa/easyrsa --subject-alt-name='DNS:$dnsname,email:$userid' sign-req server $internalname" || ret=1
    fi

    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--signclient")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    userid=$(getparam "--userid" "$@") || userid="$internalname"
    dnsname=$(getparam "--dns" "$@") || dnsname=""

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    if [ ! -f "$crypto_dir/pki/reqs/${internalname}.req" ] ; then
      ret=1
      errorinfo "No such a request: ${internalname}.req"
    fi
    if [ $ret -eq 0 ] && [ -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      ret=1
      errorinfo "Cert with this internalname have already been issued: ${internalname}"
    fi
    if [ $ret -eq 0 ]; then
      [ -n "$dnsname" ] && dnsname="DNS:${dnsname},"
      exec_inside "$crypto_dir" "easy-rsa/easyrsa --subject-alt-name='${dnsname}email:$userid' sign-req client $internalname" || ret=1
    fi
    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--exec")
    if ! cmd=$(getparam "--cmd" "$@") ; then
      errorinfo "Command is not specified"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    exec_inside "$crypto_dir" "$cmd" || ret=1
    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--info")
    internalname=$(getparam "--internalname" "$@") || internalname=""
    serial=$(getparam "--serial" "$@") || serial=""
    if ([ -n "$internalname" ] && [ -n "$serial" ]) || ([ -z "$internalname" ] && [ -z "$serial" ]); then
      errorinfo "Only one of internalname or serial must be specified"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    cert_file=""
    if [ -n "$serial" ] && [ -f "$crypto_dir/pki/certs_by_serial/${serial^^}.pem" ] ; then
      cert_file="$crypto_dir/pki/certs_by_serial/${serial^^}.pem"
      echo "ACTIVE"
    elif [ -n "$serial" ] && [ -f "$crypto_dir/pki/revoked/certs_by_serial/${serial^^}.crt" ] ; then
      cert_file="$crypto_dir/pki/revoked/certs_by_serial/${serial^^}.crt"
      echo "REVOKED"
    elif [ -n "$internalname" ] && [ -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      cert_file="$crypto_dir/pki/issued/${internalname}.crt"
      echo "ACTIVE"
    else
      echo "NOTFOUND"
    fi

    [ -n "$cert_file" ] && ! openssl x509 -in "$cert_file" -noout -text && ret=1
    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--revoke")
    internalname=$(getparam "--internalname" "$@") || internalname=""
    serial=$(getparam "--serial" "$@") || serial=""
    if ([ -n "$internalname" ] && [ -n "$serial" ]) || ([ -z "$internalname" ] && [ -z "$serial" ]); then
      errorinfo "Only one of internalname or serial must be specified"
      exit 1
    fi

    if ! crl_file=$(getparam "--file" "$@"); then
      errorinfo "Where to export the new CRL?"
      exit 1
    fi
    crl_file=$(realpath -ms -- "$crl_file")
    if ! mkdir -p $(dirname "$crl_file") || ! touch "$crl_file" || [ ! -w "$crl_file" ] || [ ! -f "$crl_file" ] ; then
      errorinfo "Cannot write CRL in file: $crl_file"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=1
    if [ -n "$internalname" ] && [ -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      ret=0
    elif [ -n "$serial" ] ; then

      internalname=""
      while read fname; do
        [ -z "$fname" ] && continue
        sn=$(openssl x509 -in "$fname" -noout -serial | cut -d"=" -f2)
        [ "${serial^^}" == "${sn^^}" ] && internalname=$(basename "$fname"|sed 's/\.[^\.]*$//')
      done <<< $(find "$crypto_dir/pki/issued/" -type f -name '*.crt')

      if [ -n "$internalname" ]; then
        ret=0
      elif [ -z "$internalname" ] && [ -f "$crypto_dir/pki/certs_by_serial/${serial^^}.pem" ] ; then
        echo "Trying to revoke a cert without crt file in issued/ but with pem file in serials."
        echo "Kinda weired case, pki might be corrupted, but priority is to revoke."
        echo "There still might be a key file left."
        tempfile=$(mktemp "$crypto_dir/pki/issued/tmpXXXXXXXX.crt") && \
          cp -f "$crypto_dir/pki/certs_by_serial/${serial^^}.pem" "$tempfile" && \
          internalname="$(basename "$tempfile"|sed 's/\.[^\.]*$//')" && ret=0
      fi
    fi
    [ $ret -ne 0 ] && errorinfo "Cert not found."

    [ $ret -eq 0 ] && ! exec_inside "$crypto_dir" "easy-rsa/easyrsa revoke $internalname" && ret=1
    exec_inside "$crypto_dir" "easy-rsa/easyrsa gen-crl" || ret=1
    exec_inside "$crypto_dir" "cp -f pki/crl.pem \"$crl_file\"" || ret=1
    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--crl")
    if ! crl_file=$(getparam "--file" "$@"); then
      errorinfo "Where to export the new CRL?"
      exit 1
    fi
    crl_file=$(realpath -ms -- "$crl_file")
    if ! mkdir -p $(dirname "$crl_file") || ! touch "$crl_file" || [ ! -w "$crl_file" ] || [ ! -f "$crl_file" ] ; then
      errorinfo "Cannot write CRL in file: $crl_file"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    exec_inside "$crypto_dir" "easy-rsa/easyrsa gen-crl" || ret=1
    exec_inside "$crypto_dir" "cp -f pki/crl.pem \"$crl_file\"" || ret=1
    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--loadtemplate")
    if ! load_file=$(getparam "--file" "$@") ; then
      errorinfo "No file to load"
      exit 1
    fi

    load_file=$(realpath -ms -- "$load_file")
    if [ ! -f "$load_file" ]; then
      errorinfo "File does not exists: $load_file"
      return 1
    fi

    close_container "$pki_container" || exit 1
    crypto_dir=$(open_container "$pki_container" "$CTKEY") || exit 1

    ret=0
    cp -f "$load_file" "$crypto_dir/templates/" || ret=1
    close_container "$pki_container" || ret=1

    exit $ret
    ;;

  "--export-chain")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    if ! export_file=$(getparam "--file" "$@"); then
      errorinfo "Where to export?"
      exit 1
    fi
    export_file=$(realpath -ms -- "$export_file")
    if ! mkdir -p $(dirname "$export_file") || ! touch "$export_file" || [ ! -w "$export_file" ] || [ ! -f "$export_file" ] ; then
      errorinfo "Cannot write in file: $export_file"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    exec_inside "$crypto_dir" "easy-rsa/easyrsa export-p12 $internalname" || ret=1
    [ $ret -eq 0 ] && ! mv -f "$crypto_dir/pki/private/${internalname}.p12" "$export_file" || ret=1

    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--export-response")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    if ! export_file=$(getparam "--file" "$@"); then
      errorinfo "Where to export?"
      exit 1
    fi
    export_file=$(realpath -ms -- "$export_file")
    if ! mkdir -p $(dirname "$export_file") || ! touch "$export_file" || [ ! -w "$export_file" ] || [ ! -f "$export_file" ] ; then
      errorinfo "Cannot write in file: $export_file"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    exec_inside "$crypto_dir" "easy-rsa/easyrsa export-p7 $internalname" || ret=1
    [ $ret -eq 0 ] && ! mv -f "$crypto_dir/pki/issued/${internalname}.p7b" "$export_file" && ret=1

    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--export-zip")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    if ! export_file=$(getparam "--file" "$@"); then
      errorinfo "Where to export?"
      exit 1
    fi
    export_file=$(realpath -ms -- "$export_file")
    if ! mkdir -p $(dirname "$export_file") || ! touch "$export_file" || [ ! -w "$export_file" ] || [ ! -f "$export_file" ] ; then
      errorinfo "Cannot write in file: $export_file"
      exit 1
    fi

    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0

    [ -s "$export_file" ] || rm -f "$export_file"
    zip -j "$export_file" "$crypto_dir/pki/ca.crt" "$crypto_dir/pki/ta.key" "$crypto_dir/pki/issued/${internalname}.crt" "$crypto_dir/pki/private/${internalname}.key" || ret=1
    close_container "$pki_container" || ret=1

    exit $ret
  ;;

  "--export-config")
    if ! internalname=$(getparam "--internalname" "$@") || [ "$internalname" == "ca" ] ; then
      errorinfo "Incorrect internalname. Can not be empty or \"ca\""
      exit 1
    fi

    if ! export_file=$(getparam "--file" "$@"); then
      errorinfo "Where to export?"
      exit 1
    fi
    export_file=$(realpath -ms -- "$export_file")
    if ! mkdir -p $(dirname "$export_file") || ! touch "$export_file" || [ ! -w "$export_file" ] || [ ! -f "$export_file" ] ; then
      errorinfo "Cannot write in file: $export_file"
      exit 1
    fi

    if ! template=$(getparam "--template" "$@"); then
      errorinfo "Need a template"
      exit 1
    fi


    if ! close_container "$pki_container"; then
      exit 1
    fi

    if ! crypto_dir=$(open_container "$pki_container" "$CTKEY"); then
      exit 1
    fi

    ret=0
    if [ $ret -eq 0 ] && [ ! -f "$crypto_dir/pki/issued/${internalname}.crt" ] ; then
      ret=1
      errorinfo "No cert with this internalname: $internalname"
    fi

    if [ $ret -eq 0 ] && [ ! -f "$crypto_dir/templates/$template" ]; then
      ret=1
      errorinfo "No such template: $template"
    fi

    if [ $ret -eq 0 ]; then
      export SUBSTKEYNAME="$internalname"
      export SUBSTCA=$(echo -e "<ca>\n$(cat "$crypto_dir/pki/ca.crt")\n</ca>")  #"
      export SUBSTTLS=$(echo -e "<tls-crypt>\n$(cat "$crypto_dir/pki/ta.key")\n</tls-crypt>")  #"
      export SUBSTCERT=$(echo -e "<cert>\n$(cat "$crypto_dir/pki/issued/${internalname}.crt")\n</cert>")  #"
      fingerprint=$(openssl x509 -in "$crypto_dir/pki/issued/${internalname}.crt" -fingerprint -noout | sed 's/://g' | cut -d"=" -f2)
      export SUBSTCERTAPI="cryptoapicert \"THUMB:${fingerprint}\""

      [ -f "$crypto_dir/pki/private/${internalname}.key" ] && export SUBSTKEY=$(echo -e "<key>\n$(cat "$crypto_dir/pki/private/${internalname}.key")\n</key>")  #"
      envsubst < "$crypto_dir/templates/$template" > "$export_file" || ret=1
    fi
    close_container "$pki_container" || ret=1

    exit $ret
  ;;


  *)
    errorinfo "No command given"
    exit 1
    ;;
esac
